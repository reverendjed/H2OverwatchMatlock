{"ast":null,"code":"/**\n * Fetches the role of a user from the Firestore database.\n * @param {string} userId - The ID of the user.\n * @returns {Promise<string|null>} - A promise that resolves to the role of the user, or null if the user document does not exist.\n */\nimport { db } from '../firebase-config';\nimport { doc, getDoc } from 'firebase/firestore';\nexport async function fetchUserRole(userId) {\n  const docRef = doc(db, \"users\", userId);\n  const docSnap = await getDoc(docRef);\n  if (docSnap.exists()) {\n    return docSnap.data().role; // Assuming the user document has a 'role' field\n  } else {\n    console.log(\"No such document!\");\n    return null;\n  }\n}","map":{"version":3,"names":["db","doc","getDoc","fetchUserRole","userId","docRef","docSnap","exists","data","role","console","log"],"sources":["/Users/jeffryjones/Desktop/h2overwatch/login/src/services/firebaseService.js"],"sourcesContent":["\n/**\n * Fetches the role of a user from the Firestore database.\n * @param {string} userId - The ID of the user.\n * @returns {Promise<string|null>} - A promise that resolves to the role of the user, or null if the user document does not exist.\n */\nimport { db } from '../firebase-config';\nimport { doc, getDoc } from 'firebase/firestore';\n\nexport async function fetchUserRole(userId) {\n  const docRef = doc(db, \"users\", userId);\n  const docSnap = await getDoc(docRef);\n  if (docSnap.exists()) {\n    return docSnap.data().role; // Assuming the user document has a 'role' field\n  } else {\n    console.log(\"No such document!\");\n    return null;\n  }\n}\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA,SAASA,EAAE,QAAQ,oBAAoB;AACvC,SAASC,GAAG,EAAEC,MAAM,QAAQ,oBAAoB;AAEhD,OAAO,eAAeC,aAAaA,CAACC,MAAM,EAAE;EAC1C,MAAMC,MAAM,GAAGJ,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEI,MAAM,CAAC;EACvC,MAAME,OAAO,GAAG,MAAMJ,MAAM,CAACG,MAAM,CAAC;EACpC,IAAIC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;IACpB,OAAOD,OAAO,CAACE,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAC9B,CAAC,MAAM;IACLC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAChC,OAAO,IAAI;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}